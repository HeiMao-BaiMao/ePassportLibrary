
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Choice(Name = "Target")]
    public class Target : IASN1PreparedElement 
    {
        
        private GeneralName targetName_;
        private bool  targetName_selected = false;

        
		[ASN1Element(Name = "targetName", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public GeneralName TargetName
        {
            get { return targetName_; }
            set { selectTargetName(value); }
        }
  
        private GeneralName targetGroup_;
        private bool  targetGroup_selected = false;

        
		[ASN1Element(Name = "targetGroup", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public GeneralName TargetGroup
        {
            get { return targetGroup_; }
            set { selectTargetGroup(value); }
        }
  
        private TargetCert targetCert_;
        private bool  targetCert_selected = false;

        
		[ASN1Element(Name = "targetCert", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public TargetCert TargetCert
        {
            get { return targetCert_; }
            set { selectTargetCert(value); }
        }
  
        public bool isTargetNameSelected()
        {
            return this.targetName_selected;
        }

        

        public void selectTargetName (GeneralName val) 
        {
            this.targetName_ = val;
            this.targetName_selected = true;
            
            this.targetGroup_selected = false;
            
            this.targetCert_selected = false;
            
        }
  
        public bool isTargetGroupSelected()
        {
            return this.targetGroup_selected;
        }

        

        public void selectTargetGroup (GeneralName val) 
        {
            this.targetGroup_ = val;
            this.targetGroup_selected = true;
            
            this.targetName_selected = false;
            
            this.targetCert_selected = false;
            
        }
  
        public bool isTargetCertSelected()
        {
            return this.targetCert_selected;
        }

        

        public void selectTargetCert (TargetCert val) 
        {
            this.targetCert_ = val;
            this.targetCert_selected = true;
            
            this.targetName_selected = false;
            
            this.targetGroup_selected = false;
            
        }
  

        public void initWithDefaults()
        {
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Target));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

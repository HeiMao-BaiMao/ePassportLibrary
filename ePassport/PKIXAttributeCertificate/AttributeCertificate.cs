
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "AttributeCertificate", IsSet = false)]
    public class AttributeCertificate : IASN1PreparedElement 
    {
        
        private AttributeCertificateInfo acinfo_;
        
		[ASN1Element(Name = "acinfo", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public AttributeCertificateInfo Acinfo
        {
            get { return acinfo_; }
            set { acinfo_ = value;  }
        }
  
        private AlgorithmIdentifier signatureAlgorithm_;
        
		[ASN1Element(Name = "signatureAlgorithm", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public AlgorithmIdentifier SignatureAlgorithm
        {
            get { return signatureAlgorithm_; }
            set { signatureAlgorithm_ = value;  }
        }
  
        private BitString signatureValue_;
        [ASN1BitString( Name = "" )]
    
		[ASN1Element(Name = "signatureValue", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public BitString SignatureValue
        {
            get { return signatureValue_; }
            set { signatureValue_ = value;  }
        }
  

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AttributeCertificate));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

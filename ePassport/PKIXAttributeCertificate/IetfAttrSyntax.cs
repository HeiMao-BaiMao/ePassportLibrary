
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "IetfAttrSyntax", IsSet = false)]
    public class IetfAttrSyntax : IASN1PreparedElement 
    {
        
        private GeneralNames policyAuthority_;
        
        private bool  policyAuthority_present = false;
        
		[ASN1Element(Name = "policyAuthority", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public GeneralNames PolicyAuthority
        {
            get { return policyAuthority_; }
            set { policyAuthority_ = value; policyAuthority_present = true;  }
        }
  
        private System.Collections.Generic.ICollection<ValuesChoiceType> values_;
        

    [ASN1PreparedElement]
    [ASN1Choice(Name = "values")]
    public class ValuesChoiceType : IASN1PreparedElement  
    {
        
        private byte[] octets_;
        private bool  octets_selected = false;

        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "octets", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public byte[] Octets
        {
            get { return octets_; }
            set { selectOctets(value); }
        }
  
        private ObjectIdentifier oid_;
        private bool  oid_selected = false;

        [ASN1ObjectIdentifier( Name = "" )]
    
		[ASN1Element(Name = "oid", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public ObjectIdentifier Oid
        {
            get { return oid_; }
            set { selectOid(value); }
        }
  
        private string string_;
        private bool  string_selected = false;

        
		[ASN1String(Name = "", StringType = UniversalTags.UTF8String, IsUCS = false)]
		[ASN1Element(Name = "string", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public string String
        {
            get { return string_; }
            set { selectString(value); }
        }
  
        public bool isOctetsSelected()
        {
            return this.octets_selected;
        }

        

        public void selectOctets (byte[] val) 
        {
            this.octets_ = val;
            this.octets_selected = true;
            
            this.oid_selected = false;
            
            this.string_selected = false;
            
        }
  
        public bool isOidSelected()
        {
            return this.oid_selected;
        }

        

        public void selectOid (ObjectIdentifier val) 
        {
            this.oid_ = val;
            this.oid_selected = true;
            
            this.octets_selected = false;
            
            this.string_selected = false;
            
        }
  
        public bool isStringSelected()
        {
            return this.string_selected;
        }

        

        public void selectString (string val) 
        {
            this.string_ = val;
            this.string_selected = true;
            
            this.octets_selected = false;
            
            this.oid_selected = false;
            
        }
  

        public void initWithDefaults()
        {
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ValuesChoiceType));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
                
		[ASN1SequenceOf(Name = "values", IsSetOf = false)]
    
		[ASN1Element(Name = "values", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public System.Collections.Generic.ICollection<ValuesChoiceType> Values
        {
            get { return values_; }
            set { values_ = value;  }
        }
  
        public bool isPolicyAuthorityPresent()
        {
            return this.policyAuthority_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(IetfAttrSyntax));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}


//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "RoleSyntax", IsSet = false)]
    public class RoleSyntax : IASN1PreparedElement 
    {
        
        private GeneralNames roleAuthority_;
        
        private bool  roleAuthority_present = false;
        
		[ASN1Element(Name = "roleAuthority", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public GeneralNames RoleAuthority
        {
            get { return roleAuthority_; }
            set { roleAuthority_ = value; roleAuthority_present = true;  }
        }
  
        private GeneralName roleName_;
        
		[ASN1Element(Name = "roleName", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public GeneralName RoleName
        {
            get { return roleName_; }
            set { roleName_ = value;  }
        }
  
        public bool isRoleAuthorityPresent()
        {
            return this.roleAuthority_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(RoleSyntax));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

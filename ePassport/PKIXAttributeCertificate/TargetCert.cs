
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "TargetCert", IsSet = false)]
    public class TargetCert : IASN1PreparedElement 
    {
        
        private IssuerSerial targetCertificate_;
        
		[ASN1Element(Name = "targetCertificate", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public IssuerSerial TargetCertificate
        {
            get { return targetCertificate_; }
            set { targetCertificate_ = value;  }
        }
  
        private GeneralName targetName_;
        
        private bool  targetName_present = false;
        
		[ASN1Element(Name = "targetName", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public GeneralName TargetName
        {
            get { return targetName_; }
            set { targetName_ = value; targetName_present = true;  }
        }
  
        private ObjectDigestInfo certDigestInfo_;
        
        private bool  certDigestInfo_present = false;
        
		[ASN1Element(Name = "certDigestInfo", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public ObjectDigestInfo CertDigestInfo
        {
            get { return certDigestInfo_; }
            set { certDigestInfo_ = value; certDigestInfo_present = true;  }
        }
  
        public bool isTargetNamePresent()
        {
            return this.targetName_present == true;
        }
        
        public bool isCertDigestInfoPresent()
        {
            return this.certDigestInfo_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(TargetCert));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

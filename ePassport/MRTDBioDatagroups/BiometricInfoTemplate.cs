
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1BoxedType(Name = "BiometricInfoTemplate")]
    public class BiometricInfoTemplate: IASN1PreparedElement 
    {

        private BiometricInfoTemplateSequenceType val;

        
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "BiometricInfoTemplate", IsSet = false)]
    public class BiometricInfoTemplateSequenceType : IASN1PreparedElement
    {
        
        private BiometricHeaderTemplate biometricHeaderTemplate_;
        
		[ASN1Element(Name = "biometricHeaderTemplate", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public BiometricHeaderTemplate BiometricHeaderTemplate
        {
            get { return biometricHeaderTemplate_; }
            set { biometricHeaderTemplate_ = value;  }
        }
  
        private BiometricDataBlock biometricDataBlock_;
        
		[ASN1Element(Name = "biometricDataBlock", IsOptional = false, HasTag = true, Tag = 46, TagClass = TagClasses.Application, HasDefaultValue = false)]
        public BiometricDataBlock BiometricDataBlock
        {
            get { return biometricDataBlock_; }
            set { biometricDataBlock_ = value;  }
        }
  
        
        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(BiometricInfoTemplateSequenceType));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }
    }
                
		[ASN1Element(Name = "BiometricInfoTemplate", IsOptional = false, HasTag = true, Tag = 96, TagClass = TagClasses.Application, HasDefaultValue = false)]
        public BiometricInfoTemplateSequenceType Value
        {
            get { return val; }
            
            set { val = value; }
            
        }

        
        
        public BiometricInfoTemplate ()
        {
        }

        public void initWithDefaults()
        {
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(BiometricInfoTemplate));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

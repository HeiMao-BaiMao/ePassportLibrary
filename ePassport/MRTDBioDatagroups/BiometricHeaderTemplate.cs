
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "BiometricHeaderTemplate", IsSet = false)]
    public class BiometricHeaderTemplate : IASN1PreparedElement 
    {
        
        private byte[] headerVersion_;
        
        private bool  headerVersion_present = false;
        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "headerVersion", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public byte[] HeaderVersion
        {
            get { return headerVersion_; }
            set { headerVersion_ = value; headerVersion_present = true;  }
        }
  
        private BiometricType biometricType_;
        
        private bool  biometricType_present = false;
        
		[ASN1Element(Name = "biometricType", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public BiometricType BiometricType
        {
            get { return biometricType_; }
            set { biometricType_ = value; biometricType_present = true;  }
        }
  
        private byte[] biometricSubType_;
        
        private bool  biometricSubType_present = false;
        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "biometricSubType", IsOptional = true, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public byte[] BiometricSubType
        {
            get { return biometricSubType_; }
            set { biometricSubType_ = value; biometricSubType_present = true;  }
        }
  
        private Time creationDateTime_;
        
        private bool  creationDateTime_present = false;
        
		[ASN1Element(Name = "creationDateTime", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public Time CreationDateTime
        {
            get { return creationDateTime_; }
            set { creationDateTime_ = value; creationDateTime_present = true;  }
        }
  
        private Validity validityPeriod_;
        
        private bool  validityPeriod_present = false;
        
		[ASN1Element(Name = "validityPeriod", IsOptional = true, HasTag = true, Tag = 5, HasDefaultValue = false)]
        public Validity ValidityPeriod
        {
            get { return validityPeriod_; }
            set { validityPeriod_ = value; validityPeriod_present = true;  }
        }
  
        private byte[] creator_;
        
        private bool  creator_present = false;
        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "creator", IsOptional = true, HasTag = true, Tag = 6, HasDefaultValue = false)]
        public byte[] Creator
        {
            get { return creator_; }
            set { creator_ = value; creator_present = true;  }
        }
  
        private byte[] formatOwner_;
        [ASN1OctetString( Name = "" )]
    
            [ASN1SizeConstraint ( Max = 2L )]
        
		[ASN1Element(Name = "formatOwner", IsOptional = false, HasTag = true, Tag = 7, HasDefaultValue = false)]
        public byte[] FormatOwner
        {
            get { return formatOwner_; }
            set { formatOwner_ = value;  }
        }
  
        private byte[] formatType_;
        [ASN1OctetString( Name = "" )]
    
            [ASN1SizeConstraint ( Max = 2L )]
        
		[ASN1Element(Name = "formatType", IsOptional = false, HasTag = true, Tag = 8, HasDefaultValue = false)]
        public byte[] FormatType
        {
            get { return formatType_; }
            set { formatType_ = value;  }
        }
  
        public bool isHeaderVersionPresent()
        {
            return this.headerVersion_present == true;
        }
        
        public bool isBiometricTypePresent()
        {
            return this.biometricType_present == true;
        }
        
        public bool isBiometricSubTypePresent()
        {
            return this.biometricSubType_present == true;
        }
        
        public bool isCreationDateTimePresent()
        {
            return this.creationDateTime_present == true;
        }
        
        public bool isValidityPeriodPresent()
        {
            return this.validityPeriod_present == true;
        }
        
        public bool isCreatorPresent()
        {
            return this.creator_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(BiometricHeaderTemplate));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

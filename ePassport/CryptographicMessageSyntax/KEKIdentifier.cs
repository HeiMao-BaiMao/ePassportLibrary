
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "KEKIdentifier", IsSet = false)]
    public class KEKIdentifier : IASN1PreparedElement 
    {
        
        private byte[] keyIdentifier_;
        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "keyIdentifier", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public byte[] KeyIdentifier
        {
            get { return keyIdentifier_; }
            set { keyIdentifier_ = value;  }
        }
  
        private string date_;
        
        private bool  date_present = false;
        
		[ASN1String(Name = "", StringType = UniversalTags.GeneralizedTime, IsUCS = false)]
		[ASN1Element(Name = "date", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public string Date
        {
            get { return date_; }
            set { date_ = value; date_present = true;  }
        }
  
        private OtherKeyAttribute other_;
        
        private bool  other_present = false;
        
		[ASN1Element(Name = "other", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public OtherKeyAttribute Other
        {
            get { return other_; }
            set { other_ = value; other_present = true;  }
        }
  
        public bool isDatePresent()
        {
            return this.date_present == true;
        }
        
        public bool isOtherPresent()
        {
            return this.other_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(KEKIdentifier));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

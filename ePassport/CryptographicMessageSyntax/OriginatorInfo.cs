
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "OriginatorInfo", IsSet = false)]
    public class OriginatorInfo : IASN1PreparedElement 
    {
        
        private CertificateSet certs_;
        
        private bool  certs_present = false;
        
		[ASN1Element(Name = "certs", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public CertificateSet Certs
        {
            get { return certs_; }
            set { certs_ = value; certs_present = true;  }
        }
  
        private RevocationInfoChoices crls_;
        
        private bool  crls_present = false;
        
		[ASN1Element(Name = "crls", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public RevocationInfoChoices Crls
        {
            get { return crls_; }
            set { crls_ = value; crls_present = true;  }
        }
  
        public bool isCertsPresent()
        {
            return this.certs_present == true;
        }
        
        public bool isCrlsPresent()
        {
            return this.crls_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(OriginatorInfo));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

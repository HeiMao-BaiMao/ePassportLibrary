
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "EncapsulatedContentInfo", IsSet = false)]
    public class EncapsulatedContentInfo : IASN1PreparedElement 
    {
        
        private ContentType eContentType_;
        
		[ASN1Element(Name = "eContentType", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public ContentType EContentType
        {
            get { return eContentType_; }
            set { eContentType_ = value;  }
        }
  
        private byte[] eContent_;
        
        private bool  eContent_present = false;
        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "eContent", IsOptional = true, HasTag = true, Tag = 0, IsImplicitTag = false, HasDefaultValue = false)]
        public byte[] EContent
        {
            get { return eContent_; }
            set { eContent_ = value; eContent_present = true;  }
        }
  
        public bool isEContentPresent()
        {
            return this.eContent_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(EncapsulatedContentInfo));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

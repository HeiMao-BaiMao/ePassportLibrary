
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "SignedData", IsSet = false)]
    public class SignedData : IASN1PreparedElement 
    {
        
        private CMSVersion version_;
        
		[ASN1Element(Name = "version", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public CMSVersion Version
        {
            get { return version_; }
            set { version_ = value;  }
        }
  
        private DigestAlgorithmIdentifiers digestAlgorithms_;
        
		[ASN1Element(Name = "digestAlgorithms", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public DigestAlgorithmIdentifiers DigestAlgorithms
        {
            get { return digestAlgorithms_; }
            set { digestAlgorithms_ = value;  }
        }
  
        private EncapsulatedContentInfo encapContentInfo_;
        
		[ASN1Element(Name = "encapContentInfo", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public EncapsulatedContentInfo EncapContentInfo
        {
            get { return encapContentInfo_; }
            set { encapContentInfo_ = value;  }
        }
  
        private CertificateSet certificates_;
        
        private bool  certificates_present = false;
        
		[ASN1Element(Name = "certificates", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public CertificateSet Certificates
        {
            get { return certificates_; }
            set { certificates_ = value; certificates_present = true;  }
        }
  
        private RevocationInfoChoices crls_;
        
        private bool  crls_present = false;
        
		[ASN1Element(Name = "crls", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public RevocationInfoChoices Crls
        {
            get { return crls_; }
            set { crls_ = value; crls_present = true;  }
        }
  
        private SignerInfos signerInfos_;
        
		[ASN1Element(Name = "signerInfos", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public SignerInfos SignerInfos
        {
            get { return signerInfos_; }
            set { signerInfos_ = value;  }
        }
  
        public bool isCertificatesPresent()
        {
            return this.certificates_present == true;
        }
        
        public bool isCrlsPresent()
        {
            return this.crls_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(SignedData));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

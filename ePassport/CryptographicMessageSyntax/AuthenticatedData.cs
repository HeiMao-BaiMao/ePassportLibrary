
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "AuthenticatedData", IsSet = false)]
    public class AuthenticatedData : IASN1PreparedElement 
    {
        
        private CMSVersion version_;
        
		[ASN1Element(Name = "version", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public CMSVersion Version
        {
            get { return version_; }
            set { version_ = value;  }
        }
  
        private OriginatorInfo originatorInfo_;
        
        private bool  originatorInfo_present = false;
        
		[ASN1Element(Name = "originatorInfo", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public OriginatorInfo OriginatorInfo
        {
            get { return originatorInfo_; }
            set { originatorInfo_ = value; originatorInfo_present = true;  }
        }
  
        private RecipientInfos recipientInfos_;
        
		[ASN1Element(Name = "recipientInfos", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public RecipientInfos RecipientInfos
        {
            get { return recipientInfos_; }
            set { recipientInfos_ = value;  }
        }
  
        private MessageAuthenticationCodeAlgorithm macAlgorithm_;
        
		[ASN1Element(Name = "macAlgorithm", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public MessageAuthenticationCodeAlgorithm MacAlgorithm
        {
            get { return macAlgorithm_; }
            set { macAlgorithm_ = value;  }
        }
  
        private DigestAlgorithmIdentifier digestAlgorithm_;
        
        private bool  digestAlgorithm_present = false;
        
		[ASN1Element(Name = "digestAlgorithm", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public DigestAlgorithmIdentifier DigestAlgorithm
        {
            get { return digestAlgorithm_; }
            set { digestAlgorithm_ = value; digestAlgorithm_present = true;  }
        }
  
        private EncapsulatedContentInfo encapContentInfo_;
        
		[ASN1Element(Name = "encapContentInfo", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public EncapsulatedContentInfo EncapContentInfo
        {
            get { return encapContentInfo_; }
            set { encapContentInfo_ = value;  }
        }
  
        private AuthAttributes authAttrs_;
        
        private bool  authAttrs_present = false;
        
		[ASN1Element(Name = "authAttrs", IsOptional = true, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public AuthAttributes AuthAttrs
        {
            get { return authAttrs_; }
            set { authAttrs_ = value; authAttrs_present = true;  }
        }
  
        private MessageAuthenticationCode mac_;
        
		[ASN1Element(Name = "mac", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public MessageAuthenticationCode Mac
        {
            get { return mac_; }
            set { mac_ = value;  }
        }
  
        private UnauthAttributes unauthAttrs_;
        
        private bool  unauthAttrs_present = false;
        
		[ASN1Element(Name = "unauthAttrs", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public UnauthAttributes UnauthAttrs
        {
            get { return unauthAttrs_; }
            set { unauthAttrs_ = value; unauthAttrs_present = true;  }
        }
  
        public bool isOriginatorInfoPresent()
        {
            return this.originatorInfo_present == true;
        }
        
        public bool isDigestAlgorithmPresent()
        {
            return this.digestAlgorithm_present == true;
        }
        
        public bool isAuthAttrsPresent()
        {
            return this.authAttrs_present == true;
        }
        
        public bool isUnauthAttrsPresent()
        {
            return this.unauthAttrs_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AuthenticatedData));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

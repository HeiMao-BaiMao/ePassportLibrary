
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "SignerInfo", IsSet = false)]
    public class SignerInfo : IASN1PreparedElement 
    {
        
        private CMSVersion version_;
        
		[ASN1Element(Name = "version", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public CMSVersion Version
        {
            get { return version_; }
            set { version_ = value;  }
        }
  
        private SignerIdentifier sid_;
        
		[ASN1Element(Name = "sid", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public SignerIdentifier Sid
        {
            get { return sid_; }
            set { sid_ = value;  }
        }
  
        private DigestAlgorithmIdentifier digestAlgorithm_;
        
		[ASN1Element(Name = "digestAlgorithm", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public DigestAlgorithmIdentifier DigestAlgorithm
        {
            get { return digestAlgorithm_; }
            set { digestAlgorithm_ = value;  }
        }
  
        private SignedAttributes signedAttrs_;
        
        private bool  signedAttrs_present = false;
        
		[ASN1Element(Name = "signedAttrs", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public SignedAttributes SignedAttrs
        {
            get { return signedAttrs_; }
            set { signedAttrs_ = value; signedAttrs_present = true;  }
        }
  
        private SignatureAlgorithmIdentifier signatureAlgorithm_;
        
		[ASN1Element(Name = "signatureAlgorithm", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public SignatureAlgorithmIdentifier SignatureAlgorithm
        {
            get { return signatureAlgorithm_; }
            set { signatureAlgorithm_ = value;  }
        }
  
        private SignatureValue signature_;
        
		[ASN1Element(Name = "signature", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public SignatureValue Signature
        {
            get { return signature_; }
            set { signature_ = value;  }
        }
  
        private UnsignedAttributes unsignedAttrs_;
        
        private bool  unsignedAttrs_present = false;
        
		[ASN1Element(Name = "unsignedAttrs", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public UnsignedAttributes UnsignedAttrs
        {
            get { return unsignedAttrs_; }
            set { unsignedAttrs_ = value; unsignedAttrs_present = true;  }
        }
  
        public bool isSignedAttrsPresent()
        {
            return this.signedAttrs_present == true;
        }
        
        public bool isUnsignedAttrsPresent()
        {
            return this.unsignedAttrs_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(SignerInfo));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

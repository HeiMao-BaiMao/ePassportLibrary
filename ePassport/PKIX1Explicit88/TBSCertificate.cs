
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "TBSCertificate", IsSet = false)]
    public class TBSCertificate : IASN1PreparedElement 
    {
        
        private Version version_;
        
		[ASN1Element(Name = "version", IsOptional = false, HasTag = true, Tag = 0, IsImplicitTag = false, HasDefaultValue = true)]
        public Version Version
        {
            get { return version_; }
            set { version_ = value;  }
        }
  
        private CertificateSerialNumber serialNumber_;
        
		[ASN1Element(Name = "serialNumber", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public CertificateSerialNumber SerialNumber
        {
            get { return serialNumber_; }
            set { serialNumber_ = value;  }
        }
  
        private AlgorithmIdentifier signature_;
        
		[ASN1Element(Name = "signature", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public AlgorithmIdentifier Signature
        {
            get { return signature_; }
            set { signature_ = value;  }
        }
  
        private Name issuer_;
        
		[ASN1Element(Name = "issuer", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public Name Issuer
        {
            get { return issuer_; }
            set { issuer_ = value;  }
        }
  
        private Validity validity_;
        
		[ASN1Element(Name = "validity", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public Validity Validity
        {
            get { return validity_; }
            set { validity_ = value;  }
        }
  
        private Name subject_;
        
		[ASN1Element(Name = "subject", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public Name Subject
        {
            get { return subject_; }
            set { subject_ = value;  }
        }
  
        private SubjectPublicKeyInfo subjectPublicKeyInfo_;
        
		[ASN1Element(Name = "subjectPublicKeyInfo", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public SubjectPublicKeyInfo SubjectPublicKeyInfo
        {
            get { return subjectPublicKeyInfo_; }
            set { subjectPublicKeyInfo_ = value;  }
        }
  
        private UniqueIdentifier issuerUniqueID_;
        
        private bool  issuerUniqueID_present = false;
        
		[ASN1Element(Name = "issuerUniqueID", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public UniqueIdentifier IssuerUniqueID
        {
            get { return issuerUniqueID_; }
            set { issuerUniqueID_ = value; issuerUniqueID_present = true;  }
        }
  
        private UniqueIdentifier subjectUniqueID_;
        
        private bool  subjectUniqueID_present = false;
        
		[ASN1Element(Name = "subjectUniqueID", IsOptional = true, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public UniqueIdentifier SubjectUniqueID
        {
            get { return subjectUniqueID_; }
            set { subjectUniqueID_ = value; subjectUniqueID_present = true;  }
        }
  
        private Extensions extensions_;
        
        private bool  extensions_present = false;
        
		[ASN1Element(Name = "extensions", IsOptional = true, HasTag = true, Tag = 3, IsImplicitTag = false, HasDefaultValue = false)]
        public Extensions Extensions
        {
            get { return extensions_; }
            set { extensions_ = value; extensions_present = true;  }
        }
  
        public bool isIssuerUniqueIDPresent()
        {
            return this.issuerUniqueID_present == true;
        }
        
        public bool isSubjectUniqueIDPresent()
        {
            return this.subjectUniqueID_present == true;
        }
        
        public bool isExtensionsPresent()
        {
            return this.extensions_present == true;
        }
        

        public void initWithDefaults() 
        {
            Version param_Version =         
            new Version ( 0);
        Version = param_Version;
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(TBSCertificate));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

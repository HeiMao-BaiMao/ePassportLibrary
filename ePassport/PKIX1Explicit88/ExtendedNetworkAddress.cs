
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Choice(Name = "ExtendedNetworkAddress")]
    public class ExtendedNetworkAddress : IASN1PreparedElement 
    {
        
        private E163_4_addressSequenceType e163_4_address_;
        private bool  e163_4_address_selected = false;

        
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "e163-4-address", IsSet = false)]
    public class E163_4_addressSequenceType : IASN1PreparedElement
    {
        
        private string number_;
        
		[ASN1String(Name = "", StringType = UniversalTags.NumericString, IsUCS = false)]
		[ASN1ValueRangeConstraint(Min = 1, Max = 15)]
		[ASN1Element(Name = "number", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public string Number
        {
            get { return number_; }
            set { number_ = value;  }
        }
  
        private string sub_address_;
        
        private bool  sub_address_present = false;
        
		[ASN1String(Name = "", StringType = UniversalTags.NumericString, IsUCS = false)]
		[ASN1ValueRangeConstraint(Min = 1, Max = 40)]
		[ASN1Element(Name = "sub-address", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public string Sub_address
        {
            get { return sub_address_; }
            set { sub_address_ = value; sub_address_present = true;  }
        }
  
        public bool isSub_addressPresent()
        {
            return this.sub_address_present == true;
        }
        
        
        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(E163_4_addressSequenceType));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }
    }
                
		[ASN1Element(Name = "e163-4-address", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public E163_4_addressSequenceType E163_4_address
        {
            get { return e163_4_address_; }
            set { selectE163_4_address(value); }
        }
  
        private PresentationAddress psap_address_;
        private bool  psap_address_selected = false;

        
		[ASN1Element(Name = "psap-address", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public PresentationAddress Psap_address
        {
            get { return psap_address_; }
            set { selectPsap_address(value); }
        }
  
        public bool isE163_4_addressSelected()
        {
            return this.e163_4_address_selected;
        }

        

        public void selectE163_4_address (E163_4_addressSequenceType val) 
        {
            this.e163_4_address_ = val;
            this.e163_4_address_selected = true;
            
            this.e163_4_address_selected = false;
            
            this.psap_address_selected = false;
            
        }
  
        public bool isPsap_addressSelected()
        {
            return this.psap_address_selected;
        }

        

        public void selectPsap_address (PresentationAddress val) 
        {
            this.psap_address_ = val;
            this.psap_address_selected = true;
            
            this.e163_4_address_selected = false;
            
            this.psap_address_selected = false;
            
        }
  

        public void initWithDefaults()
        {
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ExtendedNetworkAddress));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

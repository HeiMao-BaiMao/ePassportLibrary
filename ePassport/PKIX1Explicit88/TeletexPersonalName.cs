
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "TeletexPersonalName", IsSet = true)]
    public class TeletexPersonalName : IASN1PreparedElement 
    {
        
        private string surname_;
        
		[ASN1String(Name = "", StringType = UniversalTags.TeletexString, IsUCS = false)]
		[ASN1ValueRangeConstraint(Min = 1, Max = 40)]
		[ASN1Element(Name = "surname", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public string Surname
        {
            get { return surname_; }
            set { surname_ = value;  }
        }
  
        private string given_name_;
        
        private bool  given_name_present = false;
        
		[ASN1String(Name = "", StringType = UniversalTags.TeletexString, IsUCS = false)]
		[ASN1ValueRangeConstraint(Min = 1, Max = 16)]
		[ASN1Element(Name = "given-name", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public string Given_name
        {
            get { return given_name_; }
            set { given_name_ = value; given_name_present = true;  }
        }
  
        private string initials_;
        
        private bool  initials_present = false;
        
		[ASN1String(Name = "", StringType = UniversalTags.TeletexString, IsUCS = false)]
		[ASN1ValueRangeConstraint(Min = 1, Max = 5)]
		[ASN1Element(Name = "initials", IsOptional = true, HasTag = true, Tag = 2, HasDefaultValue = false)]
        public string Initials
        {
            get { return initials_; }
            set { initials_ = value; initials_present = true;  }
        }
  
        private string generation_qualifier_;
        
        private bool  generation_qualifier_present = false;
        
		[ASN1String(Name = "", StringType = UniversalTags.TeletexString, IsUCS = false)]
		[ASN1ValueRangeConstraint(Min = 1, Max = 3)]
		[ASN1Element(Name = "generation-qualifier", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public string Generation_qualifier
        {
            get { return generation_qualifier_; }
            set { generation_qualifier_ = value; generation_qualifier_present = true;  }
        }
  
        public bool isGiven_namePresent()
        {
            return this.given_name_present == true;
        }
        
        public bool isInitialsPresent()
        {
            return this.initials_present == true;
        }
        
        public bool isGeneration_qualifierPresent()
        {
            return this.generation_qualifier_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(TeletexPersonalName));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

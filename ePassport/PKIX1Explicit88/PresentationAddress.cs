
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "PresentationAddress", IsSet = false)]
    public class PresentationAddress : IASN1PreparedElement 
    {
        
        private byte[] pSelector_;
        
        private bool  pSelector_present = false;
        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "pSelector", IsOptional = true, HasTag = true, Tag = 0, IsImplicitTag = false, HasDefaultValue = false)]
        public byte[] PSelector
        {
            get { return pSelector_; }
            set { pSelector_ = value; pSelector_present = true;  }
        }
  
        private byte[] sSelector_;
        
        private bool  sSelector_present = false;
        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "sSelector", IsOptional = true, HasTag = true, Tag = 1, IsImplicitTag = false, HasDefaultValue = false)]
        public byte[] SSelector
        {
            get { return sSelector_; }
            set { sSelector_ = value; sSelector_present = true;  }
        }
  
        private byte[] tSelector_;
        
        private bool  tSelector_present = false;
        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "tSelector", IsOptional = true, HasTag = true, Tag = 2, IsImplicitTag = false, HasDefaultValue = false)]
        public byte[] TSelector
        {
            get { return tSelector_; }
            set { tSelector_ = value; tSelector_present = true;  }
        }
  
        private System.Collections.Generic.ICollection<byte[]> nAddresses_;
        [ASN1OctetString( Name = "" )]
    
		[ASN1SequenceOf(Name = "nAddresses", IsSetOf = true)]
    
		[ASN1ValueRangeConstraint(Min = 1, Max = long.MaxValue)]
		[ASN1Element(Name = "nAddresses", IsOptional = false, HasTag = true, Tag = 3, IsImplicitTag = false, HasDefaultValue = false)]
        public System.Collections.Generic.ICollection<byte[]> NAddresses
        {
            get { return nAddresses_; }
            set { nAddresses_ = value;  }
        }
  
        public bool isPSelectorPresent()
        {
            return this.pSelector_present == true;
        }
        
        public bool isSSelectorPresent()
        {
            return this.sSelector_present == true;
        }
        
        public bool isTSelectorPresent()
        {
            return this.tSelector_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(PresentationAddress));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

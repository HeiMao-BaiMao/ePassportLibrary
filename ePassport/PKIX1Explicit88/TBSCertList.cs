
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "TBSCertList", IsSet = false)]
    public class TBSCertList : IASN1PreparedElement 
    {
        
        private Version version_;
        
        private bool  version_present = false;
        
		[ASN1Element(Name = "version", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public Version Version
        {
            get { return version_; }
            set { version_ = value; version_present = true;  }
        }
  
        private AlgorithmIdentifier signature_;
        
		[ASN1Element(Name = "signature", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public AlgorithmIdentifier Signature
        {
            get { return signature_; }
            set { signature_ = value;  }
        }
  
        private Name issuer_;
        
		[ASN1Element(Name = "issuer", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public Name Issuer
        {
            get { return issuer_; }
            set { issuer_ = value;  }
        }
  
        private Time thisUpdate_;
        
		[ASN1Element(Name = "thisUpdate", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public Time ThisUpdate
        {
            get { return thisUpdate_; }
            set { thisUpdate_ = value;  }
        }
  
        private Time nextUpdate_;
        
        private bool  nextUpdate_present = false;
        
		[ASN1Element(Name = "nextUpdate", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public Time NextUpdate
        {
            get { return nextUpdate_; }
            set { nextUpdate_ = value; nextUpdate_present = true;  }
        }
  
        private System.Collections.Generic.ICollection<RevokedCertificatesSequenceType> revokedCertificates_;
        
        private bool  revokedCertificates_present = false;
        
    [ASN1PreparedElement]
    [ASN1Sequence(Name = "revokedCertificates", IsSet = false)]
    public class RevokedCertificatesSequenceType : IASN1PreparedElement
    {
        
        private CertificateSerialNumber userCertificate_;
        
		[ASN1Element(Name = "userCertificate", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public CertificateSerialNumber UserCertificate
        {
            get { return userCertificate_; }
            set { userCertificate_ = value;  }
        }
  
        private Time revocationDate_;
        
		[ASN1Element(Name = "revocationDate", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public Time RevocationDate
        {
            get { return revocationDate_; }
            set { revocationDate_ = value;  }
        }
  
        private Extensions crlEntryExtensions_;
        
        private bool  crlEntryExtensions_present = false;
        
		[ASN1Element(Name = "crlEntryExtensions", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public Extensions CrlEntryExtensions
        {
            get { return crlEntryExtensions_; }
            set { crlEntryExtensions_ = value; crlEntryExtensions_present = true;  }
        }
  
        public bool isCrlEntryExtensionsPresent()
        {
            return this.crlEntryExtensions_present == true;
        }
        
        
        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(RevokedCertificatesSequenceType));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }
    }
                
		[ASN1SequenceOf(Name = "revokedCertificates", IsSetOf = false)]
    
		[ASN1Element(Name = "revokedCertificates", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public System.Collections.Generic.ICollection<RevokedCertificatesSequenceType> RevokedCertificates
        {
            get { return revokedCertificates_; }
            set { revokedCertificates_ = value; revokedCertificates_present = true;  }
        }
  
        private Extensions crlExtensions_;
        
        private bool  crlExtensions_present = false;
        
		[ASN1Element(Name = "crlExtensions", IsOptional = true, HasTag = true, Tag = 0, IsImplicitTag = false, HasDefaultValue = false)]
        public Extensions CrlExtensions
        {
            get { return crlExtensions_; }
            set { crlExtensions_ = value; crlExtensions_present = true;  }
        }
  
        public bool isVersionPresent()
        {
            return this.version_present == true;
        }
        
        public bool isNextUpdatePresent()
        {
            return this.nextUpdate_present == true;
        }
        
        public bool isRevokedCertificatesPresent()
        {
            return this.revokedCertificates_present == true;
        }
        
        public bool isCrlExtensionsPresent()
        {
            return this.crlExtensions_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(TBSCertList));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

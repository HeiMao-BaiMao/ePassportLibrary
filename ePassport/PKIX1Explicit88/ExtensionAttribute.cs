
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "ExtensionAttribute", IsSet = false)]
    public class ExtensionAttribute : IASN1PreparedElement 
    {
        
        private int extension_attribute_type_;
        [ASN1Integer( Name = "" )]
    
		[ASN1ValueRangeConstraint(Min = 0, Max = 256)]
		[ASN1Element(Name = "extension-attribute-type", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public int Extension_attribute_type
        {
            get { return extension_attribute_type_; }
            set { extension_attribute_type_ = value;  }
        }
  
        private byte[] extension_attribute_value_;
        [ASN1Any( Name = "" )]
    
		[ASN1Element(Name = "extension-attribute-value", IsOptional = false, HasTag = true, Tag = 1, IsImplicitTag = false, HasDefaultValue = false)]
        public byte[] Extension_attribute_value
        {
            get { return extension_attribute_value_; }
            set { extension_attribute_value_ = value;  }
        }
  

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ExtensionAttribute));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}


//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "BuiltInStandardAttributes", IsSet = false)]
    public class BuiltInStandardAttributes : IASN1PreparedElement 
    {
        
        private CountryName country_name_;
        
        private bool  country_name_present = false;
        
		[ASN1Element(Name = "country-name", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public CountryName Country_name
        {
            get { return country_name_; }
            set { country_name_ = value; country_name_present = true;  }
        }
  
        private AdministrationDomainName administration_domain_name_;
        
        private bool  administration_domain_name_present = false;
        
		[ASN1Element(Name = "administration-domain-name", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public AdministrationDomainName Administration_domain_name
        {
            get { return administration_domain_name_; }
            set { administration_domain_name_ = value; administration_domain_name_present = true;  }
        }
  
        private NetworkAddress network_address_;
        
        private bool  network_address_present = false;
        
		[ASN1Element(Name = "network-address", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public NetworkAddress Network_address
        {
            get { return network_address_; }
            set { network_address_ = value; network_address_present = true;  }
        }
  
        private TerminalIdentifier terminal_identifier_;
        
        private bool  terminal_identifier_present = false;
        
		[ASN1Element(Name = "terminal-identifier", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public TerminalIdentifier Terminal_identifier
        {
            get { return terminal_identifier_; }
            set { terminal_identifier_ = value; terminal_identifier_present = true;  }
        }
  
        private PrivateDomainName private_domain_name_;
        
        private bool  private_domain_name_present = false;
        
		[ASN1Element(Name = "private-domain-name", IsOptional = true, HasTag = true, Tag = 2, IsImplicitTag = false, HasDefaultValue = false)]
        public PrivateDomainName Private_domain_name
        {
            get { return private_domain_name_; }
            set { private_domain_name_ = value; private_domain_name_present = true;  }
        }
  
        private OrganizationName organization_name_;
        
        private bool  organization_name_present = false;
        
		[ASN1Element(Name = "organization-name", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public OrganizationName Organization_name
        {
            get { return organization_name_; }
            set { organization_name_ = value; organization_name_present = true;  }
        }
  
        private NumericUserIdentifier numeric_user_identifier_;
        
        private bool  numeric_user_identifier_present = false;
        
		[ASN1Element(Name = "numeric-user-identifier", IsOptional = true, HasTag = true, Tag = 4, HasDefaultValue = false)]
        public NumericUserIdentifier Numeric_user_identifier
        {
            get { return numeric_user_identifier_; }
            set { numeric_user_identifier_ = value; numeric_user_identifier_present = true;  }
        }
  
        private PersonalName personal_name_;
        
        private bool  personal_name_present = false;
        
		[ASN1Element(Name = "personal-name", IsOptional = true, HasTag = true, Tag = 5, HasDefaultValue = false)]
        public PersonalName Personal_name
        {
            get { return personal_name_; }
            set { personal_name_ = value; personal_name_present = true;  }
        }
  
        private OrganizationalUnitNames organizational_unit_names_;
        
        private bool  organizational_unit_names_present = false;
        
		[ASN1Element(Name = "organizational-unit-names", IsOptional = true, HasTag = true, Tag = 6, HasDefaultValue = false)]
        public OrganizationalUnitNames Organizational_unit_names
        {
            get { return organizational_unit_names_; }
            set { organizational_unit_names_ = value; organizational_unit_names_present = true;  }
        }
  
        public bool isCountry_namePresent()
        {
            return this.country_name_present == true;
        }
        
        public bool isAdministration_domain_namePresent()
        {
            return this.administration_domain_name_present == true;
        }
        
        public bool isNetwork_addressPresent()
        {
            return this.network_address_present == true;
        }
        
        public bool isTerminal_identifierPresent()
        {
            return this.terminal_identifier_present == true;
        }
        
        public bool isPrivate_domain_namePresent()
        {
            return this.private_domain_name_present == true;
        }
        
        public bool isOrganization_namePresent()
        {
            return this.organization_name_present == true;
        }
        
        public bool isNumeric_user_identifierPresent()
        {
            return this.numeric_user_identifier_present == true;
        }
        
        public bool isPersonal_namePresent()
        {
            return this.personal_name_present == true;
        }
        
        public bool isOrganizational_unit_namesPresent()
        {
            return this.organizational_unit_names_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(BuiltInStandardAttributes));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

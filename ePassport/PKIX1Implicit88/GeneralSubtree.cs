
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "GeneralSubtree", IsSet = false)]
    public class GeneralSubtree : IASN1PreparedElement 
    {
        
        private GeneralName base_;
        
		[ASN1Element(Name = "base", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public GeneralName Base
        {
            get { return base_; }
            set { base_ = value;  }
        }
  
        private BaseDistance minimum_;
        
		[ASN1Element(Name = "minimum", IsOptional = false, HasTag = true, Tag = 0, HasDefaultValue = true)]
        public BaseDistance Minimum
        {
            get { return minimum_; }
            set { minimum_ = value;  }
        }
  
        private BaseDistance maximum_;
        
        private bool  maximum_present = false;
        
		[ASN1Element(Name = "maximum", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public BaseDistance Maximum
        {
            get { return maximum_; }
            set { maximum_ = value; maximum_present = true;  }
        }
  
        public bool isMaximumPresent()
        {
            return this.maximum_present == true;
        }
        

        public void initWithDefaults() 
        {
            BaseDistance param_Minimum =         
            new BaseDistance ( 0);
        Minimum = param_Minimum;
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(GeneralSubtree));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

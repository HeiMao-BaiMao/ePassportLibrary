
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "IssuingDistributionPoint", IsSet = false)]
    public class IssuingDistributionPoint : IASN1PreparedElement 
    {
        
        private DistributionPointName distributionPoint_;
        
        private bool  distributionPoint_present = false;
        
		[ASN1Element(Name = "distributionPoint", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public DistributionPointName DistributionPoint
        {
            get { return distributionPoint_; }
            set { distributionPoint_ = value; distributionPoint_present = true;  }
        }
  
        private bool onlyContainsUserCerts_;
        [ASN1Boolean( Name = "" )]
    
		[ASN1Element(Name = "onlyContainsUserCerts", IsOptional = false, HasTag = true, Tag = 1, HasDefaultValue = true)]
        public bool OnlyContainsUserCerts
        {
            get { return onlyContainsUserCerts_; }
            set { onlyContainsUserCerts_ = value;  }
        }
  
        private bool onlyContainsCACerts_;
        [ASN1Boolean( Name = "" )]
    
		[ASN1Element(Name = "onlyContainsCACerts", IsOptional = false, HasTag = true, Tag = 2, HasDefaultValue = true)]
        public bool OnlyContainsCACerts
        {
            get { return onlyContainsCACerts_; }
            set { onlyContainsCACerts_ = value;  }
        }
  
        private ReasonFlags onlySomeReasons_;
        
        private bool  onlySomeReasons_present = false;
        
		[ASN1Element(Name = "onlySomeReasons", IsOptional = true, HasTag = true, Tag = 3, HasDefaultValue = false)]
        public ReasonFlags OnlySomeReasons
        {
            get { return onlySomeReasons_; }
            set { onlySomeReasons_ = value; onlySomeReasons_present = true;  }
        }
  
        private bool indirectCRL_;
        [ASN1Boolean( Name = "" )]
    
		[ASN1Element(Name = "indirectCRL", IsOptional = false, HasTag = true, Tag = 4, HasDefaultValue = true)]
        public bool IndirectCRL
        {
            get { return indirectCRL_; }
            set { indirectCRL_ = value;  }
        }
  
        private bool onlyContainsAttributeCerts_;
        [ASN1Boolean( Name = "" )]
    
		[ASN1Element(Name = "onlyContainsAttributeCerts", IsOptional = false, HasTag = true, Tag = 5, HasDefaultValue = true)]
        public bool OnlyContainsAttributeCerts
        {
            get { return onlyContainsAttributeCerts_; }
            set { onlyContainsAttributeCerts_ = value;  }
        }
  
        public bool isDistributionPointPresent()
        {
            return this.distributionPoint_present == true;
        }
        
        public bool isOnlySomeReasonsPresent()
        {
            return this.onlySomeReasons_present == true;
        }
        

        public void initWithDefaults() 
        {
            bool param_OnlyContainsUserCerts =         
            false;
        OnlyContainsUserCerts = param_OnlyContainsUserCerts;
    bool param_OnlyContainsCACerts =         
            false;
        OnlyContainsCACerts = param_OnlyContainsCACerts;
    bool param_IndirectCRL =         
            false;
        IndirectCRL = param_IndirectCRL;
    bool param_OnlyContainsAttributeCerts =         
            false;
        OnlyContainsAttributeCerts = param_OnlyContainsAttributeCerts;
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(IssuingDistributionPoint));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

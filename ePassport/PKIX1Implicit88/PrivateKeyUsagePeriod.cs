
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "PrivateKeyUsagePeriod", IsSet = false)]
    public class PrivateKeyUsagePeriod : IASN1PreparedElement 
    {
        
        private string notBefore_;
        
        private bool  notBefore_present = false;
        
		[ASN1String(Name = "", StringType = UniversalTags.GeneralizedTime, IsUCS = false)]
		[ASN1Element(Name = "notBefore", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public string NotBefore
        {
            get { return notBefore_; }
            set { notBefore_ = value; notBefore_present = true;  }
        }
  
        private string notAfter_;
        
        private bool  notAfter_present = false;
        
		[ASN1String(Name = "", StringType = UniversalTags.GeneralizedTime, IsUCS = false)]
		[ASN1Element(Name = "notAfter", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public string NotAfter
        {
            get { return notAfter_; }
            set { notAfter_ = value; notAfter_present = true;  }
        }
  
        public bool isNotBeforePresent()
        {
            return this.notBefore_present == true;
        }
        
        public bool isNotAfterPresent()
        {
            return this.notAfter_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(PrivateKeyUsagePeriod));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

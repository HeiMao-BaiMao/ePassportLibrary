
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "BasicConstraints", IsSet = false)]
    public class BasicConstraints : IASN1PreparedElement 
    {
        
        private bool cA_;
        [ASN1Boolean( Name = "" )]
    
		[ASN1Element(Name = "cA", IsOptional = false, HasTag = false, HasDefaultValue = true)]
        public bool CA
        {
            get { return cA_; }
            set { cA_ = value;  }
        }
  
        private long pathLenConstraint_;
        
        private bool  pathLenConstraint_present = false;
        [ASN1Integer( Name = "" )]
    
		[ASN1ValueRangeConstraint(Min = 0, Max = long.MaxValue)]
		[ASN1Element(Name = "pathLenConstraint", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public long PathLenConstraint
        {
            get { return pathLenConstraint_; }
            set { pathLenConstraint_ = value; pathLenConstraint_present = true;  }
        }
  
        public bool isPathLenConstraintPresent()
        {
            return this.pathLenConstraint_present == true;
        }
        

        public void initWithDefaults() 
        {
            bool param_CA =         
            false;
        CA = param_CA;
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(BasicConstraints));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

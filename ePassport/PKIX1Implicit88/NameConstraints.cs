
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "NameConstraints", IsSet = false)]
    public class NameConstraints : IASN1PreparedElement 
    {
        
        private GeneralSubtrees permittedSubtrees_;
        
        private bool  permittedSubtrees_present = false;
        
		[ASN1Element(Name = "permittedSubtrees", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public GeneralSubtrees PermittedSubtrees
        {
            get { return permittedSubtrees_; }
            set { permittedSubtrees_ = value; permittedSubtrees_present = true;  }
        }
  
        private GeneralSubtrees excludedSubtrees_;
        
        private bool  excludedSubtrees_present = false;
        
		[ASN1Element(Name = "excludedSubtrees", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public GeneralSubtrees ExcludedSubtrees
        {
            get { return excludedSubtrees_; }
            set { excludedSubtrees_ = value; excludedSubtrees_present = true;  }
        }
  
        public bool isPermittedSubtreesPresent()
        {
            return this.permittedSubtrees_present == true;
        }
        
        public bool isExcludedSubtreesPresent()
        {
            return this.excludedSubtrees_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(NameConstraints));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}


//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "PolicyInformation", IsSet = false)]
    public class PolicyInformation : IASN1PreparedElement 
    {
        
        private CertPolicyId policyIdentifier_;
        
		[ASN1Element(Name = "policyIdentifier", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public CertPolicyId PolicyIdentifier
        {
            get { return policyIdentifier_; }
            set { policyIdentifier_ = value;  }
        }
  
        private System.Collections.Generic.ICollection<PolicyQualifierInfo> policyQualifiers_;
        
        private bool  policyQualifiers_present = false;
        
		[ASN1SequenceOf(Name = "policyQualifiers", IsSetOf = false)]
    
		[ASN1ValueRangeConstraint(Min = 1, Max = long.MaxValue)]
		[ASN1Element(Name = "policyQualifiers", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public System.Collections.Generic.ICollection<PolicyQualifierInfo> PolicyQualifiers
        {
            get { return policyQualifiers_; }
            set { policyQualifiers_ = value; policyQualifiers_present = true;  }
        }
  
        public bool isPolicyQualifiersPresent()
        {
            return this.policyQualifiers_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(PolicyInformation));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

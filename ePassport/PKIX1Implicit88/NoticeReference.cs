
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "NoticeReference", IsSet = false)]
    public class NoticeReference : IASN1PreparedElement 
    {
        
        private DisplayText organization_;
        
		[ASN1Element(Name = "organization", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public DisplayText Organization
        {
            get { return organization_; }
            set { organization_ = value;  }
        }
  
        private System.Collections.Generic.ICollection<BigInteger> noticeNumbers_;
        [ASN1Integer( Name = "" )]
    
		[ASN1SequenceOf(Name = "noticeNumbers", IsSetOf = false)]
    
		[ASN1Element(Name = "noticeNumbers", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public System.Collections.Generic.ICollection<BigInteger> NoticeNumbers
        {
            get { return noticeNumbers_; }
            set { noticeNumbers_ = value;  }
        }
  

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(NoticeReference));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

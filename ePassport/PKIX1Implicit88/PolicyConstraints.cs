
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "PolicyConstraints", IsSet = false)]
    public class PolicyConstraints : IASN1PreparedElement 
    {
        
        private SkipCerts requireExplicitPolicy_;
        
        private bool  requireExplicitPolicy_present = false;
        
		[ASN1Element(Name = "requireExplicitPolicy", IsOptional = true, HasTag = true, Tag = 0, HasDefaultValue = false)]
        public SkipCerts RequireExplicitPolicy
        {
            get { return requireExplicitPolicy_; }
            set { requireExplicitPolicy_ = value; requireExplicitPolicy_present = true;  }
        }
  
        private SkipCerts inhibitPolicyMapping_;
        
        private bool  inhibitPolicyMapping_present = false;
        
		[ASN1Element(Name = "inhibitPolicyMapping", IsOptional = true, HasTag = true, Tag = 1, HasDefaultValue = false)]
        public SkipCerts InhibitPolicyMapping
        {
            get { return inhibitPolicyMapping_; }
            set { inhibitPolicyMapping_ = value; inhibitPolicyMapping_present = true;  }
        }
  
        public bool isRequireExplicitPolicyPresent()
        {
            return this.requireExplicitPolicy_present == true;
        }
        
        public bool isInhibitPolicyMappingPresent()
        {
            return this.inhibitPolicyMapping_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(PolicyConstraints));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

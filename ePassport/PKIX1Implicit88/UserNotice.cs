
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "UserNotice", IsSet = false)]
    public class UserNotice : IASN1PreparedElement 
    {
        
        private NoticeReference noticeRef_;
        
        private bool  noticeRef_present = false;
        
		[ASN1Element(Name = "noticeRef", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public NoticeReference NoticeRef
        {
            get { return noticeRef_; }
            set { noticeRef_ = value; noticeRef_present = true;  }
        }
  
        private DisplayText explicitText_;
        
        private bool  explicitText_present = false;
        
		[ASN1Element(Name = "explicitText", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public DisplayText ExplicitText
        {
            get { return explicitText_; }
            set { explicitText_ = value; explicitText_present = true;  }
        }
  
        public bool isNoticeRefPresent()
        {
            return this.noticeRef_present == true;
        }
        
        public bool isExplicitTextPresent()
        {
            return this.explicitText_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(UserNotice));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}

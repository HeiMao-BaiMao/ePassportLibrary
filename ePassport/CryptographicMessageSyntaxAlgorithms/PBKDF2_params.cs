
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "PBKDF2_params", IsSet = false)]
    public class PBKDF2_params : IASN1PreparedElement 
    {
        
        private SaltChoiceType salt_;
        

    [ASN1PreparedElement]
    [ASN1Choice(Name = "salt")]
    public class SaltChoiceType : IASN1PreparedElement  
    {
        
        private byte[] specified_;
        private bool  specified_selected = false;

        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "specified", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public byte[] Specified
        {
            get { return specified_; }
            set { selectSpecified(value); }
        }
  
        private AlgorithmIdentifier otherSource_;
        private bool  otherSource_selected = false;

        
		[ASN1Element(Name = "otherSource", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public AlgorithmIdentifier OtherSource
        {
            get { return otherSource_; }
            set { selectOtherSource(value); }
        }
  
        public bool isSpecifiedSelected()
        {
            return this.specified_selected;
        }

        

        public void selectSpecified (byte[] val) 
        {
            this.specified_ = val;
            this.specified_selected = true;
            
            this.otherSource_selected = false;
            
        }
  
        public bool isOtherSourceSelected()
        {
            return this.otherSource_selected;
        }

        

        public void selectOtherSource (AlgorithmIdentifier val) 
        {
            this.otherSource_ = val;
            this.otherSource_selected = true;
            
            this.specified_selected = false;
            
        }
  

        public void initWithDefaults()
        {
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(SaltChoiceType));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
                
		[ASN1Element(Name = "salt", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public SaltChoiceType Salt
        {
            get { return salt_; }
            set { salt_ = value;  }
        }
  
        private long iterationCount_;
        [ASN1Integer( Name = "" )]
    
		[ASN1ValueRangeConstraint(Min = 1, Max = long.MaxValue)]
		[ASN1Element(Name = "iterationCount", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public long IterationCount
        {
            get { return iterationCount_; }
            set { iterationCount_ = value;  }
        }
  
        private long keyLength_;
        
        private bool  keyLength_present = false;
        [ASN1Integer( Name = "" )]
    
		[ASN1ValueRangeConstraint(Min = 1, Max = long.MaxValue)]
		[ASN1Element(Name = "keyLength", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public long KeyLength
        {
            get { return keyLength_; }
            set { keyLength_ = value; keyLength_present = true;  }
        }
  
        private AlgorithmIdentifier prf_;
        
        private bool  prf_present = false;
        
		[ASN1Element(Name = "prf", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public AlgorithmIdentifier Prf
        {
            get { return prf_; }
            set { prf_ = value; prf_present = true;  }
        }
  
        public bool isKeyLengthPresent()
        {
            return this.keyLength_present == true;
        }
        
        public bool isPrfPresent()
        {
            return this.prf_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(PBKDF2_params));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}


//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "DHDomainParameters", IsSet = false)]
    public class DHDomainParameters : IASN1PreparedElement 
    {
        
        private BigInteger p_;
        [ASN1Integer( Name = "" )]
    
		[ASN1Element(Name = "p", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public BigInteger P
        {
            get { return p_; }
            set { p_ = value;  }
        }
  
        private BigInteger g_;
        [ASN1Integer( Name = "" )]
    
		[ASN1Element(Name = "g", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public BigInteger G
        {
            get { return g_; }
            set { g_ = value;  }
        }
  
        private BigInteger q_;
        [ASN1Integer( Name = "" )]
    
		[ASN1Element(Name = "q", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public BigInteger Q
        {
            get { return q_; }
            set { q_ = value;  }
        }
  
        private BigInteger j_;
        
        private bool  j_present = false;
        [ASN1Integer( Name = "" )]
    
		[ASN1Element(Name = "j", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public BigInteger J
        {
            get { return j_; }
            set { j_ = value; j_present = true;  }
        }
  
        private ValidationParms validationParms_;
        
        private bool  validationParms_present = false;
        
		[ASN1Element(Name = "validationParms", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public ValidationParms ValidationParms
        {
            get { return validationParms_; }
            set { validationParms_ = value; validationParms_present = true;  }
        }
  
        public bool isJPresent()
        {
            return this.j_present == true;
        }
        
        public bool isValidationParmsPresent()
        {
            return this.validationParms_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(DHDomainParameters));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}


//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "ECParameters", IsSet = false)]
    public class ECParameters : IASN1PreparedElement 
    {
        
        private ECPVer version_;
        
		[ASN1Element(Name = "version", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public ECPVer Version
        {
            get { return version_; }
            set { version_ = value;  }
        }
  
        private FieldID fieldID_;
        
		[ASN1Element(Name = "fieldID", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public FieldID FieldID
        {
            get { return fieldID_; }
            set { fieldID_ = value;  }
        }
  
        private Curve curve_;
        
		[ASN1Element(Name = "curve", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public Curve Curve
        {
            get { return curve_; }
            set { curve_ = value;  }
        }
  
        private ECPoint base_;
        
		[ASN1Element(Name = "base", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public ECPoint Base
        {
            get { return base_; }
            set { base_ = value;  }
        }
  
        private BigInteger order_;
        [ASN1Integer( Name = "" )]
    
		[ASN1Element(Name = "order", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public BigInteger Order
        {
            get { return order_; }
            set { order_ = value;  }
        }
  
        private BigInteger cofactor_;
        
        private bool  cofactor_present = false;
        [ASN1Integer( Name = "" )]
    
		[ASN1Element(Name = "cofactor", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public BigInteger Cofactor
        {
            get { return cofactor_; }
            set { cofactor_ = value; cofactor_present = true;  }
        }
  
        public bool isCofactorPresent()
        {
            return this.cofactor_present == true;
        }
        

        public void initWithDefaults() 
        {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(ECParameters));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}


//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace ePassport {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "AttributeCertificateInfoV1", IsSet = false)]
    public class AttributeCertificateInfoV1 : IASN1PreparedElement 
    {
        
        private AttCertVersionV1 version_;
        
		[ASN1Element(Name = "version", IsOptional = false, HasTag = false, HasDefaultValue = true)]
        public AttCertVersionV1 Version
        {
            get { return version_; }
            set { version_ = value;  }
        }
  
        private SubjectChoiceType subject_;
        

    [ASN1PreparedElement]
    [ASN1Choice(Name = "subject")]
    public class SubjectChoiceType : IASN1PreparedElement  
    {
        
        private IssuerSerial baseCertificateID_;
        private bool  baseCertificateID_selected = false;

        
		[ASN1Element(Name = "baseCertificateID", IsOptional = false, HasTag = true, Tag = 0, IsImplicitTag = false, HasDefaultValue = false)]
        public IssuerSerial BaseCertificateID
        {
            get { return baseCertificateID_; }
            set { selectBaseCertificateID(value); }
        }
  
        private GeneralNames subjectName_;
        private bool  subjectName_selected = false;

        
		[ASN1Element(Name = "subjectName", IsOptional = false, HasTag = true, Tag = 1, IsImplicitTag = false, HasDefaultValue = false)]
        public GeneralNames SubjectName
        {
            get { return subjectName_; }
            set { selectSubjectName(value); }
        }
  
        public bool isBaseCertificateIDSelected()
        {
            return this.baseCertificateID_selected;
        }

        

        public void selectBaseCertificateID (IssuerSerial val) 
        {
            this.baseCertificateID_ = val;
            this.baseCertificateID_selected = true;
            
            this.subjectName_selected = false;
            
        }
  
        public bool isSubjectNameSelected()
        {
            return this.subjectName_selected;
        }

        

        public void selectSubjectName (GeneralNames val) 
        {
            this.subjectName_ = val;
            this.subjectName_selected = true;
            
            this.baseCertificateID_selected = false;
            
        }
  

        public void initWithDefaults()
        {
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(SubjectChoiceType));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
                
		[ASN1Element(Name = "subject", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public SubjectChoiceType Subject
        {
            get { return subject_; }
            set { subject_ = value;  }
        }
  
        private GeneralNames issuer_;
        
		[ASN1Element(Name = "issuer", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public GeneralNames Issuer
        {
            get { return issuer_; }
            set { issuer_ = value;  }
        }
  
        private AlgorithmIdentifier signature_;
        
		[ASN1Element(Name = "signature", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public AlgorithmIdentifier Signature
        {
            get { return signature_; }
            set { signature_ = value;  }
        }
  
        private CertificateSerialNumber serialNumber_;
        
		[ASN1Element(Name = "serialNumber", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public CertificateSerialNumber SerialNumber
        {
            get { return serialNumber_; }
            set { serialNumber_ = value;  }
        }
  
        private AttCertValidityPeriod attCertValidityPeriod_;
        
		[ASN1Element(Name = "attCertValidityPeriod", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public AttCertValidityPeriod AttCertValidityPeriod
        {
            get { return attCertValidityPeriod_; }
            set { attCertValidityPeriod_ = value;  }
        }
  
        private System.Collections.Generic.ICollection<Attribute> attributes_;
        
		[ASN1SequenceOf(Name = "attributes", IsSetOf = false)]
    
		[ASN1Element(Name = "attributes", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public System.Collections.Generic.ICollection<Attribute> Attributes
        {
            get { return attributes_; }
            set { attributes_ = value;  }
        }
  
        private UniqueIdentifier issuerUniqueID_;
        
        private bool  issuerUniqueID_present = false;
        
		[ASN1Element(Name = "issuerUniqueID", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public UniqueIdentifier IssuerUniqueID
        {
            get { return issuerUniqueID_; }
            set { issuerUniqueID_ = value; issuerUniqueID_present = true;  }
        }
  
        private Extensions extensions_;
        
        private bool  extensions_present = false;
        
		[ASN1Element(Name = "extensions", IsOptional = true, HasTag = false, HasDefaultValue = false)]
        public Extensions Extensions
        {
            get { return extensions_; }
            set { extensions_ = value; extensions_present = true;  }
        }
  
        public bool isIssuerUniqueIDPresent()
        {
            return this.issuerUniqueID_present == true;
        }
        
        public bool isExtensionsPresent()
        {
            return this.extensions_present == true;
        }
        

        public void initWithDefaults() 
        {
            AttCertVersionV1 param_Version =         
            new AttCertVersionV1 ( 0);
        Version = param_Version;
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(AttributeCertificateInfoV1));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}
